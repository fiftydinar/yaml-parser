#!/bin/sh

yaml_help () {
  printf "\e[1;33mUsage:\e[0m \e[1;90m==================================================================\e[0m\n"
  printf "       \e[1;90mRead YAML file content:\e[0m\n"
  printf "       yaml-parser \"file.yml\"\n"
  printf "       \e[1;90mRead YAML value from YAML key:\e[0m\n"
  printf "       yaml-parser \"file.yml\" \"key\"\n"
  printf "       \e[1;90mWrite YAML value to YAML key:\e[0m\n"
  printf "       yaml-parser \"file.yml\" -w \"key\" \"value\"\n"
  printf "       yaml-parser \"file.yml\" --write \"key\" \"value\"\n"
  printf "       \e[1;90mWrite quoted YAML value to YAML key:\e[0m\n"
  printf "       yaml-parser \"file.yml\" -w \"key\" \"\\\\\\\"value\\\\\\\"\"\n"
  printf "       yaml-parser \"file.yml\" --write \"key\" \"\\\\\\\"value\\\\\\\"\"\n"
  printf "       \e[1;90mDo multiple operations with yaml-parser:\e[0m\n"
  printf "       yaml-parser \"file1.yml\" && yaml-parser \"file2.yml\"\n"
  printf "       \e[1;90m==================================================================\e[0m\n"
  printf "\e[1;33mNotes:\e[0m Only regular YAML keys are supported. Arrays are not supported.\n"
  printf "       If duplicate keys exist, results are displayed multiple times.\n"
  printf "       Duplicate keys are not supported by official YAML specification.\n"  
  printf "\e[1;33mAbout:\e[0m \"yaml-parser\" is a tool written in SH shell, using GNU Utilities,\n       which can perform basic data reading & manipulation of YAML files.\n"
  yaml_parser_url="https://github.com/fiftydinar/yaml-parser"
  printf "       \e]8;;%s\a%s\e]8;;\a\n" "${yaml_parser_url}" "${yaml_parser_url}"
}

yaml_read () {
    result1=$(awk -F ": " -v key="${2}" '{sub(/#.*/, "", $2); gsub(/^[ \t]+|[ \t]+$/, "", $2)} $1 == key {gsub(/"/, "", $2); print $2}' "${1}")
    if [ -z "${result1}" ]; then
      printf "\e[1;31mnull\e[0m\n"  # Print "null" in red color if no results are found
    else
      printf "\e[1;94m%s\e[0m\n" "${result1}"  # Print the matching result in blue color
    fi
}

yaml_write () {
    result2=$(awk -F ": " -v key="${3}" '{sub(/#.*/, "", $2); gsub(/^[ \t]+|[ \t]+$/, "", $2)} $1 == key {print $2}' "${1}")
    if [ -z "${result2}" ]; then
      printf "\e[1;31mERROR: Supplied YAML key doesn't exist.\e[0m\n" 1>&2
    else
      sed -i "s/\(${3}: ${result2}\)/${3}: ${4}/g" "${1}" # Write the supplied value to specified yaml key
    fi
}

if [ -z "${1}" ] || [ "${1}" = "help" ] || [ "${1}" = "--help" ] || [ "${1}" = "-h" ]; then
  yaml_help
elif case "${1}" in (*.yml|*.yaml) false;; (*) true;; esac; then
  printf "\e[1;31mERROR: YAML file is not specified in supported .yml or .yaml extension.\e[0m\n" 1>&2
elif [ -n "${1}" ] && [ -f "${1}" ] && [ -n "${2}" ] && [ ! "${2}" = "-w" ] && [ ! "${2}" = "--write" ]; then
  yaml_read "${1}" "${2}"
elif [ -n "${1}" ] && [ -f "${1}" ] && [ -n "${2}" ] && [ "${2}" = "-w" ] || [ "${2}" = "--write" ] && [ -n "${3}" ] && [ -n "${4}" ]; then
  yaml_write "${1}" "${2}" "${3}" "${4}"
elif [ -n "${1}" ] && [ -f "${1}" ]; then
line_number=1
while IFS= read -r line; do
    printf "\033[1;33m%4d: \033[0m\033[1;94m%s\033[0m\n" $line_number "${line}"
    ((line_number++))
done < "${1}"
elif ! [ -f "${1}" ]; then
  printf "\e[1;31mERROR: YAML file that is specified is not found in the directory.\e[0m\n" 1>&2
fi
